--- /home/hans/.julia/packages/Modia/2gNMw/src/A-CodeGeneration.jl	2022-03-15 17:17:06.868198255 +0100
+++ /home/hans/.julia/packages/Modia/2gNMw/src/CodeGeneration.jl	2022-03-15 16:51:39.597599435 +0100
@@ -331,7 +331,6 @@
                                             # = false, if leq.x is provided by DAE solver and leq.residuals is used by the DAE solver.
     odeMode::Bool                           # = false: copy der(x) into linear equation systems that have leq.odeMode=false and do not solve these equation systems
     storeResult::Bool
-    storeInit::Bool
     time::TimeType
     nGetDerivatives::Int                        # Number of getDerivatives! calls
     nf::Int                                     # Number of getDerivatives! calls from integrator (without zero-crossing calls)
@@ -349,7 +348,6 @@
     result_info::OrderedDict{String,ResultInfo} # key  : Full path name of result variables
                                                 # value: Storage location and index into the storage.
     result_vars::AbstractVector                 # result_vars[ti][j] is result of variable with index j at time instant ti
-    init_vars::AbstractVector                 # 
     result_x::Union{Any,Missing}                # Return value of DifferentialEquations.solve(..) (is a struct)
     result_der_x::Vector{Vector{FloatType}}     # result_der_x[ti][j] is der_x[j] at time instant ti
     success::Bool                               # = true, if after first outputs!(..) call and no error was triggered
@@ -446,7 +444,6 @@
         eventHandler.initial = true
         isInitial   = true
         storeResult = false
-        storeInit = false
         solve_leq   = true
         nGetDerivatives = 0
         nf = 0
@@ -457,9 +454,9 @@
             previous, nextPrevious, previous_names, previous_dict,
             pre, nextPre, pre_names, pre_dict,
             hold, nextHold, hold_names, hold_dict,
-            isInitial, solve_leq, true, storeResult, storeInit, convert(TimeType, 0), nGetDerivatives, nf,
+            isInitial, solve_leq, true, storeResult, convert(TimeType, 0), nGetDerivatives, nf,
             x_vec, x_start, zeros(FloatType,nx), zeros(FloatType,nx), true, LinearEquationsCopyInfoForDAEMode[],
-            missing, false, result_info, Tuple[], Tuple[], missing, Vector{FloatType}[], false, unitless)
+            missing, false, result_info, Tuple[], missing, Vector{FloatType}[], false, unitless)
     end
 
 
@@ -475,7 +472,6 @@
         eventHandler.initial = true
         isInitial   = true
         storeResult = false
-        storeInit = false
         solve_leq   = true
         nGetDerivatives = 0
         nf = 0
@@ -1519,14 +1515,6 @@
 end
 
 
-function addToInit!(m::SimulationModel, variableValues...)::Nothing
-    push!(m.init_vars, variableValues)
-    return nothing
-end
-
-
-
-
 """
     code = generate_getDerivatives!(AST, equationInfo, parameters, variables, functionName;
                                     hasUnits=false)
@@ -1693,10 +1681,6 @@
                             Modia.addToResult!(_m, $(variables...))
                         end
                     end
-                    if _m.storeInit
-                        Modia.addToInit!(_m, $(variables...))
-                    end
-                    
                     return nothing
                 end
             end
